// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        String    @id @default(cuid())
  title     String?
  content   String
  published Boolean   @default(false)
  createdAt DateTime  @default(now())
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?
  comments  Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_toke_secret String?
  oauth_token       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique //@unique is to make sure there is no copy
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  comment       Comment[]

  @@map(name: "users")
}

model Verification {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade) // If post gets deleted, all comments referring to that postId gets deleted. 
  postId    String?
}

// NextAuthjs requires @map and @@map to map some field and model names to different column and table names in the uderlying database.
// NextAuthjshas special requirements for calling things in your database a certain way

// how do data relationships work?
// always look at the model name and then the other model you're trying to relate it to. e.g posts + comments
// then look at the first one (posts) from a singular point of view and ask "how many <second thing> does a single <first thing> have?" 
// e.g. how many comments does a single post have?
